import numpy as np
import matplotlib.pyplot as pl

n = 2/7
u0 = 2.4
sigma = 1/n
kappa0 = [1/2, 1, 2]
k = 10
h = 1/k
tao = 5*h**4
m = int(1/tao)
x = [i * h for i in range(k+1)]
# print(x)
t = [j * tao for j in range(m)]
# print(len(t))


y = np.zeros(k+1)
yv = np.zeros(k+1)
yk = np.zeros(k+1)
D = ((kappa0[0] * (u0**sigma))/sigma)**(1/2)



for i in np.arange(0,len(t)):
    yv[0]= u0 * (t[i]**n)
    for j in np.arange(1,len(x)-1):
          yv[j]=y[j]+(tao/h**2)*kappa0[0]*((y[j]**sigma)*y[j+1]-y[j]*((y[j-1]**sigma)+(y[j]**sigma))+y[j-1]*(y[j-1]**sigma))
           # yv[j]=y[j]+(tao/h**2)*kappa0[0]*((y[j]**sigma)*y[j-1]-y[j]*((y[j]**sigma)+(y[j+1]**sigma))+y[j+1]*(y[j+1]**sigma))
    y=np.copy(yv)
    print(y)


print("--------")
for i in np.arange(0,len(t)):
    for j in np.arange(0,len(x)-1):
        if(x[j]<=D*t[i]):
          yk[j] = (u0 / (D ** (1 / sigma))) * (D * t[i] - x[j]) ** (1 / sigma)
          # yk[j] = (sigma*D*(1/kappa0[1])*(D*t[i]-x[j]))**(1/sigma)
        else:
            if (x[j]>D*t[i]):
                yk[j] = 0

    print(yk)

#
pl.plot(x,yk,x,yv)
pl.show()
