from pprint import pprint
from prettytable import PrettyTable
# import np as np
from numpy import array, zeros, diag, diagflat, dot
import numpy as np
import math
import copy

n = 10
h = 1 / (n)
eps = (1 / (15 ** 3))
alpha = 3
beta = 2
gamma = 2
u = np.zeros(n)
p = np.zeros(n)
g = np.zeros(n)
b = np.zeros(n - 1)
aii = np.zeros(n)
afi = np.zeros(n)
A = np.zeros((n - 1, n - 1))
y = np.zeros(n)
y_zeid = np.zeros(n)
y_jacobi = np.zeros(n)
y_sor1 = np.zeros(n)
y_sor2 = np.zeros(n)
y_sor3 = np.zeros(n)
y_sor4 = np.zeros(n)
y_sor5 = np.zeros(n)
x0=np.zeros(n-1)
x_jac=np.zeros(n-1)


for i in range(0, n - 1):
    p[i] = 1 + (i * h) ** gamma

for i in range(1, n):
    u[i] = ((i * h) ** alpha) * ((1 - (i * h)) ** beta)
    g[i] = i * h + 1

for i in range(1, n):
    aii[i] = (p[i - 1] + p[i] + ((h ** 2) * g[i]))
    afi[i] = -p[i]

for i in range(1, len(A)):
    for j in range(i - 2, i + 1):
        A[i][i - 1] = afi[i]
        A[i - 1][i - 1] = aii[i]
        A[i - 1][i] = afi[i]

A[-1][-1] = aii[-1]
A[-2][-1] = afi[-2]

for i in range(0, len(b)):
    b[i - 1] = ((-(i * h) ** 5) + 22 * (i * h) ** 4 - 36 * (i * h) ** 3 + 28 * (i * h) ** 2 - 19 * (i * h) + 6)
    b[-1] = (-(n - 1) * h) ** 5 + 22 * ((n - 1) * h) ** 4 - 36 * ((n - 1) * h) ** 3 + 28 * ((n - 1) * h) ** 2 - 19 * (
                (n - 1) * h) + 6

print("Матрица А")
print(A)
print("------------------------------------")
print("Правая часть матрицы")
print(b)
print("------------------------------------")

# вычисляем у
y = np.linalg.solve(A, b)
print("Точное решение СЛАУ")
print(y)
print("")

x = np.zeros(n-1)
times = 0
def jacobi(A, fi, eps, x, times, x_jac):
    iter=0
    while True:
      for i in range(n-1):
          temp = 0
          for j in range(n-1):
            if i != j:
                temp += x_jac[j] * A[i][j]
          x[i] = (fi[i] - temp) / A[i][i]
      calTemp = max(abs(x - x_jac))
      times += 1
      iter += 1
      if calTemp < eps:
        break
      else:
        x_jac = x.copy()

    print('Количество итераций методом верхней релаксации: ', iter)

    return x

print("МЕТОД ЯКОБИ")
y_jacobi = jacobi(A, b, eps, x, times, x_jac)

table = PrettyTable(['y', 'y_jacobi', 'abs'])
for i in range(len(y)):
    table.add_row([y[i], y_jacobi[i], abs(y[i] - y_jacobi[i])])
print(table)


def zeidel(A, b, initial_guess, convergence_criteria):
  iter=0
  w=1
  phi = initial_guess[:]
  residual = np.linalg.norm(np.matmul(A, phi) - b) #Initial residual
  while residual > convergence_criteria:
    for i in range(A.shape[0]):
      sigma = 0
      for j in range(A.shape[1]):
        if j != i:
          sigma += A[i][j] * phi[j]
      phi[i] = (1 - w) * phi[i] + (w / A[i][i]) * (b[i] - sigma)
    residual = np.linalg.norm(np.matmul(A, phi) - b)
    iter+=1
  print('Количество итераций методом верхней релаксации: ' , iter)
  return phi

print("МЕТОД ЗЕЙДЕЛЯ")
y_zeid = zeidel(A, b, x0, eps)

table11 = PrettyTable (['y', 'y_zeid', 'abs'])
for i in range(len(y)):
     table11.add_row ([y[i], y_zeid[i],abs(y[i] - y_zeid[i])])
print(table11)


initial_guess1=np.zeros(n-1)
def sor_solver(A, b, omega, initial_guess, convergence_criteria):
  iter=0
  phi = initial_guess[:]
  residual = np.linalg.norm(np.matmul(A, phi) - b) #Initial residual
  while residual > convergence_criteria:
    for i in range(A.shape[0]):
      sigma = 0
      for j in range(A.shape[1]):
        if j != i:
          sigma += A[i][j] * phi[j]
      phi[i] = (1 - omega) * phi[i] + (omega / A[i][i]) * (b[i] - sigma)
    residual = np.linalg.norm(np.matmul(A, phi) - b)
    iter+=1
  print('Количество итераций методом верхней релаксации: ' , iter)
  return phi

print("МЕТОД ВЕРХНЕЙ РЕЛАКСАЦИИ ПРИ W=1.7")
y_sor1 = sor_solver(A, b, 1.7, initial_guess1, eps)

table1 = PrettyTable (['y', 'SOR', 'abs'])
for i in range(len(y)):
     table1.add_row ([y[i], y_sor1[i],abs(y[i] - y_sor1[i])])
print(table1)

def verh_iter(A, B, w):
    m = len(A)
    x = [.0 for i in range(m)]
    Iteration = 0
    converge = True
    b_new = np.copy(B)
    f = np.copy(B)
    while converge:
        x_new = x
        for i in range(m):
            s1 = sum(A[i][j] * x_new[j] for j in range(i))
            s2 = sum(A[i][j] * x[j] for j in range(i + 1, m))
            # x_new[i] = (B[i] - s1 - s2) / A[i][i]  # Метод Зейделя
            x_new[i] = (1 - w) * x[i] + w * (B[i] - s1 - s2) / A[i][i]  # Метод верхней релаксации
        # pogr = sum(abs(x_new[i] - x[i]) for i in range(m))
        Iteration += 1
        b_new = A.dot(x_new)
        for i in range(0, m-1):
            f[i] = abs(B[i] - b_new[i])
        converge = max(f) > eps
    return Iteration

def search_w(A, B, n, k, min_iter):
    global min_w
    s = str(min_w)
    izm = False
    if len(s) < 5:
        # print("вошел")
        # print(len(s), min_w)
        h = (k - n) * (1 / 10)
        i = 1
        while n + i * h < k:
            iter = verh_iter(A, B, i * h + n)
            if min_iter > iter:
                min_w = i * h + n
                min_iter = iter
                # print(i,h,n,k)
                print('--------------------')
                print(min_w, min_iter)
                izm = True
            i = i + 1
        if (izm):
            search_w(A, B, min_w - h, min_w, min_iter)
            search_w(A, B, min_w, min_w + h, min_iter)


n = 1
k = 2
min_w = 1
min_iter = 100000
search_w(A, b, n, k, min_iter)
min_w = round(min_w, 3)
print('----------------')
print(min_w, verh_iter(A, b, min_w))
